---
layout: default
---

{% include mynotes.html %}
This site refers to the latest **GEMC** project (version 3 and above). 

For **CLAS12 simulations** refer to [this page](https://github.com/gemc/clas12Tags). 
For previous GEMC version, refer to [this page](https://gemc.jlab.org/gemc/html/index.html).


{% include figure.html
   src="assets/images/gemcLogo.png"
   alt="Database-driven architecture"
   caption="GEant Monte-Carlo"
   width="1000"
%}


**GEMC** leverages [Geant4](https://geant4.web.cern.ch) to run simulations of particles through geometries stored in databases.
Key features include:<br/>

- Python API provides database I/O of geometry and materials
- Custom extensibility of fieldmaps, hardware electronics, output formats and signal digitization
- Built-in `ASCII` and [`ROOT`](https://root.cern) output

<br/>



## Databases

Geant4 objects are uploaded to databases using the python API. Running simulations looks like this:

- GEMC reads databases (`ASCII`, `SQLite`, `GDML` or `CAD` files) to create the geometry (volumes, materials, surfaces, etc).
- Generated particle are transported through the geometry by Geant4. 
- The resulting hits are processed, collected and digitized. 
- Outputs are streamed to `ASCII`, `ROOT`  and/or user defined formats. 


{% include figure.html
   src="assets/images/gemcArchitecture.png"
   alt="Database-driven architecture"
   caption="
   Typical gemc workflow: detectors can be loaded from several databases sources.
   Optionally, users can add run time conditions by moving some detectors, changing some materials, etc. 
   Users generated particles are then transported through materials by Geant4. 
   Hits are collected, digitized and streamed to disk output(s)."
   width="1200"
%}

<br/><br/>

## Python API

`Python` is used to create and upload to databases the geometry, materials, mirrors, etc.

- No previous knowledge of Geant4 or C++ is required.
- The application does not need to be re-compiled when the geometry is changed.

{% include figure.html
   src="assets/images/pythonAPIGeo.png"
   alt="Python API example"
   caption="  
   An example geometry: a flux plane (generated with the snippet below) collects hits from all 
   particles generated by a beam of protons impinging on a liquid hydrogen target"
   width="1900"
%}


```python
	gvolume = GVolume('flux_box')
	gvolume.description = 'carbon fiber box'
	gvolume.make_box(40.0, 40.0, 2.0)
	gvolume.material    = 'carbonFiber'
	gvolume.color       = '3399FF'
	gvolume.digitization = 'flux'
	gvolume.set_position(0, 0, 100)
	gvolume.style       = 1
	gvolume.set_identifier('box', 2)  # identifier for this box
	gvolume.publish(configuration)
 ```


<br/><br/>


## Geometry Variations 

A detector can be re-used in multiple experiments, with configuration changes such as components shifts, 
changes of materials, addition or removal of certain volumes.
GEMC Supports these geometry versions using **variations** and/or run **numbers** to adapt to different simulation setups

{% include figure.html
   src="assets/images/clas12v.gif"
   alt="Python API example"
   caption="In the above animation two variations of the CLAS12 Central Detector are shown. 
   The geometries are identical except for the position of the target. They can be selected
   by specifying a variation string or a run number in the configuration file or command line options.
   "
   width="1900"
%}

<br/><br/>


## Continuous Integration

Gemc is built on several platforms for every commit and pull request. 
In addition, nightly releases are built and deployed the Github repository.

- [![Build and Test Images](https://github.com/gemc/src/actions/workflows/docker.yml/badge.svg)](https://github.com/gemc/src/actions/workflows/docker.yml)
- [![Doxygen](https://github.com/gemc/src/actions/workflows/doxygen.yaml/badge.svg)](https://github.com/gemc/src/actions/workflows/doxygen.yaml)
- [![Nightly Dev Release](https://github.com/gemc/src/actions/workflows/dev_release.yml/badge.svg)](https://github.com/gemc/src/actions/workflows/dev_release.yml)
- [![GEMC Homepage Deployment](https://github.com/gemc/home/actions/workflows/jekyll.yml/badge.svg)](https://github.com/gemc/home/actions/workflows/jekyll.yml)

<br/><br/>


## Reference

<br/>

*M. Ungaro*, Geant4 Monte-Carlo (GEMC) A database-driven simulation program, *EPJ Web of Conferences* [**295**, 05005 *(2024)*](https://www.epj-conferences.org/articles/epjconf/abs/2024/05/epjconf_chep2024_05005/epjconf_chep2024_05005.html)

Bibtex:
```bibtex 
@INPROCEEDINGS{2024EPJWC.29505005U,
       author = { {Ungaro}, Maurizio,
        title = "{Geant4 Monte-Carlo (GEMC) A database-driven simulation program}",
    booktitle = {European Physical Journal Web of Conferences},
         year = 2024,
       series = {European Physical Journal Web of Conferences},
       volume = {295},
        month = may,
          eid = {05005},
        pages = {05005},
          doi = {10.1051/epjconf/202429505005},
       adsurl = {https://ui.adsabs.harvard.edu/abs/2024EPJWC.29505005U},
      adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}
```

Bibitem:
```latex
\bibitem{2024EPJWC.29505005U}
{Ungaro}, M.: Geant4 Monte-Carlo (GEMC) A database-driven simulation program.
\newblock European Physical Journal Web of Conferences \textbf{295}, 05005 (2024).
\newblock \doi{10.1051/epjconf/202429505005}
```

<br/><br/>



## Source Code and Licence

<br/>

The GEMC source code on ([GitHub](https://github.com/gemc/src)) is distributed under an [open source license](/home/license/).


<br/><br/>


