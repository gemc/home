---
layout: default
---

{% include mynotes.html %}


![gemcLogo]

<br/>

This site refers to the latest **GEMC** project (version 3 and above). 

For **CLAS12 simulations** please visit [this page](https://github.com/gemc/clas12Tags). 
For previous GEMC version, please visit [this page](https://gemc.jlab.org/gemc/html/index.html).

---

<br/>

**GEMC** (**GE**ant **M**onte-**C**arlo) reads databases and [Geant4](https://geant4.web.cern.ch) to run simulations of particles through user setups.  
Key features include:<br/>

- Python API
- Databases I/O of Geant4 objects
- Custom extensibility of fieldmaps, hardware electronics, output and signal digitization
- Built-in ASCII and [ROOT](https://root.cern) output formats

<br/>



## **Databases**

GEMC reads databases to create Geant4 objects (volumes, materials, surfaces, etc).
The databases can be ASCII, SQLite, GDML or CAD files. Generated particle are transported 
through the user geometry by Geant4. The hits are processed, collected and digitized.
Outputs are streamed to ASCII, ROOT format or user defined format. 


{% include figure.html
   src="assets/images/gemcArchitecture.png"
   alt="Database-driven architecture"
   caption="
   Typical gemc usage: detectors can be loaded from several databases sources.
   Geant4 volumes, materials, mirrors, optical properties are created. Particles are transported through 
   materials by Geant4. Hits are collected and digitized. Disk output(s) are created."
   width="1200"
%}

<br/>

---

<br/>

## Python API

Geant4 volumes are uploaded to the databases using the python API. No previous knowledge of Geant4 or C++ is required.
The GEMC application is agnostic and does not need to be re-compiled when the geometry is changed.

{% include figure.html
   src="assets/images/pythonAPIGeo.png"
   alt="Python API example"
   caption="  
   An example geometry, generated with the snippet below: a flux scintillator paddle collects hits from all particles generated by a beam of protons impinging on a liquid hydrogen target"
   width="1900"
%}


```python
    def buildGeometry(configuration):

    	# target volume: a G4Tubs (make_tube)
    	# Constructor pars: inner_radius, outer_radius, half-length, starting_angle, total angle
    	gvolume = GVolume('target')
    	gvolume.description = 'Liquid Hydrogen Target'
    	gvolume.make_tube(0, 20, 40, 0, 360)
    	gvolume.material    = 'G4_lH2'	# from GEANT4 materials database
    	gvolume.color       = 'ff0000'
    	gvolume.publish(configuration)
 ```
The snippet above builds the plane geometry above and assigns a **flux** digitization to it to record the tracks hitting the paddle.


<br/>

---

<br/>

## Geometry Variations 

A detector can be re-used in multiple experiments, with configuration changes such as components shifts, 
changes of materials, addition or removal of certain volumes.

GEMC Supports these geometry versions using **variations** and/or run **numbers** to adapt to different simulation setups

{% include figure.html
   src="assets/images/clas12v.gif"
   alt="Python API example"
   caption="In the above animation two variations of the CLAS12 Central Detector (*clas12CD*) are shown. 
   The geometries are identical except for the position of the target."
   width="1900"
%}

| Geometry Variations      |                       |
|--------------------------|-----------------------|
| ![clas12v]               | {{ page.variations }} |
| *{{ page.var_caption }}* | {{ page.v6 }}         |


<br/><br/>

---

<br/>

**Continuous Integration**:

[![Almalinux Build](https://github.com/gemc/src/actions/workflows/build_gemc_almalinux.yml/badge.svg)](https://github.com/gemc/src/actions/workflows/build_gemc_almalinux.yml)
[![Fedora Build](https://github.com/gemc/src/actions/workflows/build_gemc_fedora.yml/badge.svg)](https://github.com/gemc/src/actions/workflows/build_gemc_fedora.yml)
[![Ubuntu Build](https://github.com/gemc/src/actions/workflows/build_gemc_ubuntu.yml/badge.svg)](https://github.com/gemc/src/actions/workflows/build_gemc_ubuntu.yml)
[![Doxygen](https://github.com/gemc/src/actions/workflows/doxygen.yaml/badge.svg)](https://github.com/gemc/src/actions/workflows/doxygen.yaml)
[![Sanitize](https://github.com/gemc/src/actions/workflows/sanitize.yaml/badge.svg)](https://github.com/gemc/src/actions/workflows/sanitize.yaml)
[![Nightly Dev Release](https://github.com/gemc/src/actions/workflows/dev_release.yml/badge.svg)](https://github.com/gemc/src/actions/workflows/dev_release.yml)
[![GEMC Homepage Deployment](https://github.com/gemc/home/actions/workflows/jekyll.yml/badge.svg)](https://github.com/gemc/home/actions/workflows/jekyll.yml)


<br/><br/>

---

<br/>

**Reference**:
<br/>

*M. Ungaro*, Geant4 Monte-Carlo (GEMC) A database-driven simulation program, *EPJ Web of Conferences* [**295**, 05005 *(2024)*](https://www.epj-conferences.org/articles/epjconf/abs/2024/05/epjconf_chep2024_05005/epjconf_chep2024_05005.html)

Bibtex:
```bibtex 
@INPROCEEDINGS{2024EPJWC.29505005U,
       author = { {Ungaro}, Maurizio,
        title = "{Geant4 Monte-Carlo (GEMC) A database-driven simulation program}",
    booktitle = {European Physical Journal Web of Conferences},
         year = 2024,
       series = {European Physical Journal Web of Conferences},
       volume = {295},
        month = may,
          eid = {05005},
        pages = {05005},
          doi = {10.1051/epjconf/202429505005},
       adsurl = {https://ui.adsabs.harvard.edu/abs/2024EPJWC.29505005U},
      adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}
```

Bibitem:
```latex
\bibitem{2024EPJWC.29505005U}
{Ungaro}, M.: Geant4 Monte-Carlo (GEMC) A database-driven simulation program.
\newblock European Physical Journal Web of Conferences \textbf{295}, 05005 (2024).
\newblock \doi{10.1051/epjconf/202429505005}
```

<br/><br/>

---

<br/>


**Source Code and Licence**:

<br/>

The GEMC source code on ([GitHub](https://github.com/gemc/src)) is distributed under an [open source license](/home/license/).


<br/><br/>

---

<br/>





[gemcLogo]: assets/images/gemcLogo.png